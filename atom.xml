<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CS-Tao · Blog</title>
  
  <subtitle>这是一个不能停留太久的世界</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://cs-tao.github.io/blog/"/>
  <updated>2019-04-12T06:54:15.461Z</updated>
  <id>https://cs-tao.github.io/blog/</id>
  
  <author>
    <name>CS-Tao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS 中 Function 和 Object 的关系</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/JS-%E4%B8%AD-Function-%E5%92%8C-Object-%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://cs-tao.github.io/blog/技术相关/JS-中-Function-和-Object-的关系/</id>
    <published>2019-04-04T13:55:45.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/javascript.png" width="65%" height="65%"></p><blockquote><p>js 的世界很大，并不是只有对象</p></blockquote><p>这段时间在复习前端基础知识，遇到了下面这道面试题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f.a)</span><br><span class="line"><span class="built_in">console</span>.log(f.b)</span><br></pre></td></tr></table></figure></p><p>请问这段代码会输出什么？<br><a id="more"></a><br>打开浏览器控制台，将上面这段代码复制进去，回车，我们可以得到它的答案：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ƒ ()&#123;&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure></p><p>细看我们可以发现这道题并不难，对于<code>f.a</code>，JavaScript 解释器会按照原型链的规则去查找 f 的 a 属性：</p><ol><li>在 f 本身查找是否有 a 属性，显然没有，接下来将会进入 f 的原型链查找；</li><li>查找<code>f.__proto__</code>是否有 a 属性，而<code>f.__proto__ === F.prototype</code>，显然也没有；</li><li>继续查找<code>f.__proto__.__proto__</code>，即<code>F.prototype.__proto__</code>，而<code>F.prototype.__proto__ === Object.prototype</code>，可以发现<code>Object.prototype</code> 中有 a 属性。</li></ol><p>对于<code>f.b</code>，解释器会进行和上面一样的操作，但并不会在原型链中找到 b 属性， 因为<code>f.__proto__.__proto__.__proto__ === Object.prototype.__proto__ === null</code>，结束查找</p><p>那么代码中的<code>Function.prototype.b = function(){}</code>能有什么作用呢？不难发现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.b) <span class="comment">// ƒ ()&#123;&#125;</span></span><br><span class="line"><span class="comment">// 甚至还有</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.b) <span class="comment">// ƒ ()&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.b === F.b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>看起来 F 和 Object 都是 Function 的实例？的确是这样的，所有的函数都是由 Function 的原型构造出来的，这么说 Function 是 JavaScript 的一个很基础的工具咯？但 JavaScript 不是万物皆对象吗，那 Object 和 Function 到底是什么关系呢？</p><p>我们可以做以下测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">F <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span> == <span class="built_in">Function</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>完全懵了…</p><p>为什么会出现这么怪异的结果，Object 和 Function 谁更底层一些？它们为什么会”互为实例”？</p><p>通过对 JavaScript 各个概念出现先后顺序的分析，我得到了如下的一张图：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/Js_Function_Object.png" alt="Js_Function_Object.png"></p><p>毫无疑问 JavaScript 是我学过的最糟糕的语言…</p><p>首先解释一下这张图：</p><ol><li>在 JavaScript 中，对象原型是最最基础的概念，通过对象原型得到了函数原型；</li><li>利用函数原型，可以构造出 Object()、Function() 函数，这个构造过程和其它函数的构造过程基本一致，但应该没有使用 new 运算符；</li><li>得到 Object 和 Function 后，便可以将对象原型和函数原型分别挂载到 Object 和 Function 的 prototype 上了；</li><li>利用装备上 prototype 的 Object 和 Function，便可以实现 new 运算。道生一，一生二，二生三，三生万物…</li></ol><p>结合该图和 instanceof 的判断规则，我们可以解释上面的结果：</p><p>先附上 instanceof 判断规则的伪代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">L, R</span>) </span>&#123; <span class="comment">// L 表示左表达式，R 表示右表达式</span></span><br><span class="line">  <span class="keyword">if</span> (isBasicType(L)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果是基础类型直接返回 false</span></span><br><span class="line">  <span class="keyword">var</span> O = R.prototype; <span class="comment">// 取 R 的显示原型</span></span><br><span class="line">  L = L.__proto__; <span class="comment">// 取 L 的隐式原型</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (L === <span class="literal">null</span>) </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">if</span> (O === L)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    L = L.__proto__; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果解释：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true, F.__proto__.__proto__ === '函数原型'.__proto__ === '对象原型' === Object.prototype</span></span><br><span class="line">F <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true, F.__proto__ === '函数原型' === Function.prototype</span></span><br><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true, Object.__proto__ === '函数原型' === Function.prototype</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true, Function.__proto__.__proto__ === '函数原型'.__proto__ === '对象原型' === Object.prototype</span></span><br></pre></td></tr></table></figure></p><p>我们还可以从上图发现其它一些有趣的信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype === <span class="built_in">Function</span>.__proto__ <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype === <span class="built_in">Object</span>.__proto__.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>好了到此为止，我不该入门前端的…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/javascript.png&quot; width=&quot;65%&quot; height=&quot;65%&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;js 的世界很大，并不是只有对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段时间在复习前端基础知识，遇到了下面这道面试题：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;.prototype.b = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f.a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(f.b)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;请问这段代码会输出什么？&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="JacaScript" scheme="https://cs-tao.github.io/blog/tags/JacaScript/"/>
    
  </entry>
  
  <entry>
    <title>桌面端软件实现 GitHub OAuth 第三方登录</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0-GitHub-OAuth-%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <id>https://cs-tao.github.io/blog/技术相关/桌面端软件实现-GitHub-OAuth-第三方登录/</id>
    <published>2018-12-26T08:19:56.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/05.jpg" width="65%" height="65%"></p><p>OAuth (开放授权 Open Authorization) 是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方应用或分享他们数据的所有内容。<br>但 GitHub OAuth 对桌面端的认证并没有直接的支持，本文提供了一种利用浏览器的缓存功能实现的针对桌面端 (移动端也适用) 的 GitHub OAuth 第三方登录方式，并提供了一个实例 (通过 Express.js 和 socket-io.js 搭建)。<br><a id="more"></a></p><h2 id="思路和方法"><a href="#思路和方法" class="headerlink" title="思路和方法"></a>思路和方法</h2><h3 id="网页应用的授权步骤"><a href="#网页应用的授权步骤" class="headerlink" title="网页应用的授权步骤"></a>网页应用的授权步骤</h3><p>GitHub 提供了针对网站的第三方登录策略，主要步骤如下：</p><ol><li>注册一个 OAuth App，得到 App 的 <strong>Client ID</strong> 和 <strong>Client Secret</strong>，具体请查看 <a href="https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/" target="_blank" rel="noopener">Creating an OAuth App</a></li><li>利用浏览器访问 <code>https://github.com/login/oauth/authorize?client_id={Client_ID}&amp;scope=user:email</code> (将 <strong>Client_ID</strong> 替换为上一步得到的 <strong>Client ID</strong>，<strong>scope</strong> 参数是你希望得到的用户信息的内容，具体请查看 <a href="https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/" target="_blank" rel="noopener">understanding-scopes-for-oauth-apps</a>)</li><li>当用户同意授权后，浏览器会重定向到我们到注册 App 时提供的回调地址，并在重定向链接中附带一个 <strong>code</strong> 参数。</li><li>后台利用 <strong>code</strong> 参数和第一步得到的 <strong>Client ID</strong> 和 <strong>Client Secret</strong> 访问 <code>https://github.com/login/oauth/access_token?client_id=${Client_ID}&amp;client_secret=${Client_Secret}&amp;code=${code}</code> 便可得到一个 <strong>access_token</strong></li><li>利用得到的 <strong>access_token</strong> 结合 GitHub Api 便可访问该用户的信息</li></ol><h3 id="桌面端软件授权的问题"><a href="#桌面端软件授权的问题" class="headerlink" title="桌面端软件授权的问题"></a>桌面端软件授权的问题</h3><p>因为获取 <strong>access_token</strong> 需要 <strong>code</strong> 参数，而 <strong>code</strong> 参数是重定向链接的内容之一，只能在浏览器中获得。</p><p>在网页应用中，后台通过 <strong>code</strong> 参数后可以得到 <strong>access_token</strong>，然后将 <strong>access_token</strong> 放到渲染好的网页中，发送到浏览器，浏览器将 <strong>access_token</strong> 保存到本地缓存，之后每次都访问网页资源都把本地缓存的 <strong>access_token</strong> 发送到后台，后台便能获得需要的用户信息，通过网页发送到浏览器。</p><p>然而对于桌面端软件，软件可以自行打开浏览器访问认证链接，让用户确认是否授权，但得想个方法将后台获得的 <strong>access_token</strong> 发送到桌面端软件。其中最重要的是让后台知道不同的浏览器对应的桌面端软件是哪一个，解决这个问题之后，才能把用户在不同浏览器中确认授权后得到的 <strong>access_token</strong> 发送到对应的桌面端，桌面端把它存到软件的配置文件中。第二个问题是如何把 <strong>access_token</strong> 发送到桌面端。</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>针对这两个问题，我分析了一下 <a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a> 的登录策略，找到了他们利用 GitHub OAuth 登录的方法，这也是本篇文章介绍的重点内容。</p><p>对于后台如何主动向客户端发送 <strong>access_token</strong> 的问题，解决的办法比较简单，让后台和桌面端软件建立 Socket 连接实现双向通信，每个 Socket 连接都有一个唯一标识，即 Socket id，当后台得到 <strong>access_token</strong> 后，利用 Socket id 将 <strong>access_token</strong> 发送到指定的桌面端即可。</p><blockquote><p>当然也可以采取轮询或 long pull 实现双向通信，但因为我们这里的后台相当于一个桥梁，用于连接客户端和 GitHub 的后台，所以对于每个客户端，都必须有一个唯一标识让后台知道每个 <strong>access_token</strong> 应该发给谁，Socket 连接本身提供了这个标识，无需我们额外产生，而这两种方法都需要自己产生一个唯一标识，相应的，后台也需要做一些多余的操作来储存这些标识，本文不采用这两种办法。</p></blockquote><p>解决了第二个问题，第一个问题中区分每个客户端的问题也就解决了，接下来要做的是实现把浏览器和客户端一一对应起来，现在浏览器的缓存技术(缓存客户端和服务器连接的 Socket id)终于可以派上用场了，步骤如下：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/github-oauth-flow.png" alt="工作流"></p><ol><li>客户端主动建立 Socket 连接，得到 Socket id</li><li>将 Socket id 和其他必要的参数 (比如区分是否是移动端的参数) 嵌入到一个让用户确认是否继续认证的链接中，打开浏览器访问该链接，这个网页需要做的工作是在用户点击确认后，把 Socket id 和其他参数存到本地缓存中，然后访问认证链接<br>(即 <code>https://github.com/login/oauth/authorize?client_id={Client_ID}&amp;scope=user:email</code>)</li><li>在认证页面，用户确认授权后，网页会被重定向到我们在注册 App 时提供的回调地址，并附带 <strong>code</strong> 参数，回调地址产生的连接进入阻塞状态，等待服务器返回 <strong>access_token</strong></li><li>回调地址对应的后台处理模块将 <strong>code</strong> 参数、<strong>Client ID</strong> 和 <strong>Client Secret</strong> 发送至 GitHub 后台<br>(链接是：<code>https://github.com/login/oauth/access_token?client_id=${Client_ID}&amp;client_secret=${Client_Secret}&amp;code=${code}</code>)</li><li>GitHub 后台验证 <strong>code</strong> 等参数的可用性，如果可用，GitHub 后台会将 <strong>access_token</strong> 返回给后台服务</li><li>后台得到 <strong>access_token</strong> 后，将它发送给浏览器 (第 3 步的阻塞状态结束)</li><li>浏览器得到 <strong>access_token</strong> 后，再将 <strong>access_token</strong>、缓存的 Socket id 和其他参数发送到后台，然后显示发送成功或失败的信息</li><li>后台相应的处理模块通过这些参数，将 <strong>access_token</strong> 发送到指定 Socket id 的桌面端</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="平台和框架"><a href="#平台和框架" class="headerlink" title="平台和框架"></a>平台和框架</h3><p>我用 Express.js 和 Socket-io.js 搭建了一个后台服务示例，GitHub 仓库地址：<a href="https://github.com/CS-Tao/whu-library-seat-ghauth" target="_blank" rel="noopener">whu-library-seat-ghauth</a>。</p><blockquote><p>桌面端仓库：<a href="https://github.com/CS-Tao/whu-library-seat" target="_blank" rel="noopener">whu-library-seat</a>，移动端仓库：<a href="https://github.com/CS-Tao/whu-library-seat-mobile" target="_blank" rel="noopener">whu-library-seat-mobile</a>。</p></blockquote><p>这里不再赘述代码上的细节，我将之前写的使用方法和截图记录在这里，供大家对比和参考。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>点击软件下方的<strong>钥匙</strong>进入软件授权页面(第一次打开软件会默认进入本页面)</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/1.png" alt="图片加载失败"></p></li><li><p>点击<code>GitHub Star 永久授权</code>按钮，软件会打开系统浏览器访问认证页面</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/3.png" alt="图片加载失败"></p></li><li><p>点击<code>确定通过 GitHub 账号登录</code>，此时 GitHub 会让你确认是否授权(如果没有登录 GitHub，此时会进入登录页面)</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/4.png" alt="图片加载失败"></p></li><li><p>点击<code>Authorize CS-Tao</code>即可成功登录</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/5.png" alt="图片加载失败"></p></li><li><p>登录成功后返回软件，如果出现下面的弹窗，说明您还未对本仓库点星，请进行下一步</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/5.1.png" alt="图片加载失败"></p></li><li><p>如果您还未给本仓库点星，请到指定仓库点星以供管理员了解软件使用情况。桌面端进入：<a href="https://github.com/CS-Tao/whu-library-seat" target="_blank" rel="noopener">whu-library-seat</a>，移动端进入：<a href="https://github.com/CS-Tao/whu-library-seat-mobile" target="_blank" rel="noopener">whu-library-seat-mobile</a></p><ul><li><p>桌面端点击右上角的<code>Star</code>按钮，按钮如下图所示：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/5.2.png" alt="图片加载失败"></p></li><li><p>移动端需要登录才会显示<code>Star</code>按钮，登录状态下直接点击即可，按钮如下图所示：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/5.3.png" alt="图片加载失败"></p></li></ul></li><li><p>点星后回到本软件，点击确定即可</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/github/whu-library-seat/OAuth/6.png" alt="图片加载失败"></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/05.jpg&quot; width=&quot;65%&quot; height=&quot;65%&quot;&gt;&lt;/p&gt;
&lt;p&gt;OAuth (开放授权 Open Authorization) 是一个开放标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方应用或分享他们数据的所有内容。&lt;br&gt;但 GitHub OAuth 对桌面端的认证并没有直接的支持，本文提供了一种利用浏览器的缓存功能实现的针对桌面端 (移动端也适用) 的 GitHub OAuth 第三方登录方式，并提供了一个实例 (通过 Express.js 和 socket-io.js 搭建)。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="github-oauth" scheme="https://cs-tao.github.io/blog/tags/github-oauth/"/>
    
  </entry>
  
  <entry>
    <title>将 Vue 项目中的 Axios 替换为 cordova-plugin-advanced-http</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84axios%E6%9B%BF%E6%8D%A2%E4%B8%BAcordova-plugin-advanced-http/"/>
    <id>https://cs-tao.github.io/blog/技术相关/将vue项目中的axios替换为cordova-plugin-advanced-http/</id>
    <published>2018-11-03T03:03:44.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/cordova-vue.png" width="20%" height="20%"></p><p>对于 Vue 项目，官方建议的网络请求工具是 Axios，但在 Vue 项目和 cordova 集成的时候，我发现想要更改网络请求的 header 并不是一件很简单的事(比如修改 User-Agent)，cordova 对 Axios 发出的请求似乎还添加了一层封装。为了修改 User-Agent，不得已最后还是使用了 cordova 自己的 http 插件：<a href="https://github.com/sfelipegp/cordova-plugin-advanced-http" target="_blank" rel="noopener">cordova-plugin-advanced-http</a>.<br>不难发现 Axios 是使用的 Promise 实现异步网络请求，而 cordova-plugin-advanced-http 使用的却是函数回调。所以实现这个转换最关键问题其实是如何将函数回调替换为 Promise.<br><a id="more"></a></p><blockquote><p>当然，能实现这个转换的前提是您在项目中是通过 <code>axios.create()</code> 创建了全局能访问到的实例，并且所有的网络请求都是调用这个实例实现的。也就是说本文记录的是如何将原来使用 <code>axios.create()</code> 创建的实例转换为 cordova-plugin-advanced-http 的网络请求函数。</p></blockquote><p>具体步骤如下：</p><h3 id="1-添加-cordova-plugin-advanced-http-插件"><a href="#1-添加-cordova-plugin-advanced-http-插件" class="headerlink" title="1. 添加 cordova-plugin-advanced-http 插件"></a>1. 添加 cordova-plugin-advanced-http 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-advanced-http</span><br></pre></td></tr></table></figure><h3 id="2-添加-cordova-全局变量到-Vue-实例"><a href="#2-添加-cordova-全局变量到-Vue-实例" class="headerlink" title="2. 添加 cordova 全局变量到 Vue 实例"></a>2. 添加 cordova 全局变量到 Vue 实例</h3><p>在 main.js 中添加下面的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.cordova = Vue.prototype.$cordova = <span class="built_in">window</span>.cordova</span><br></pre></td></tr></table></figure></p><h3 id="3-修改核心文件"><a href="#3-修改核心文件" class="headerlink" title="3. 修改核心文件"></a>3. 修改核心文件</h3><p>原文件内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Axios 实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://127.0.0.1:8888'</span>,</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">  withCredentials: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发出之前的拦截器</span></span><br><span class="line">request.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 修改请求头</span></span><br><span class="line">  config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span></span><br><span class="line">  config.headers[<span class="string">'User-Agent'</span>] = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到请求后的拦截器</span></span><br><span class="line">request.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> response, error =&gt; &#123;</span><br><span class="line">  <span class="comment">// 打印错误</span></span><br><span class="line">  <span class="built_in">console</span>.error(error.message)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>修改之后的文件内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改请求头</span></span><br><span class="line">Vue.cordova.plugin.http.setHeader(<span class="string">'*'</span>, <span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>)</span><br><span class="line">Vue.cordova.plugin.http.setHeader(<span class="string">'*'</span>, <span class="string">'User-Agent'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">'http://127.0.0.1:8888'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 将原 Axios 的配置项改为 cordova-plugin-advanced-http 的配置项</span></span><br><span class="line">  <span class="keyword">var</span> sendOptions = &#123;</span><br><span class="line">    method: options.method,</span><br><span class="line">    timeout: <span class="number">5</span>,</span><br><span class="line">    headers: options.headers ? options.headers : <span class="literal">null</span>,</span><br><span class="line">    params: options.params ? options.params : <span class="literal">null</span>,</span><br><span class="line">    data: options.data ? options.data : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// cordova-plugin-advanced-http 的 headers 只支持字符串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sendOptions.params) &#123;</span><br><span class="line">    sendOptions.params[key] = options.params[key].toString()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> url = baseURL + options.url</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    Vue.cordova.plugin.http.sendRequest(url, sendOptions, (response) =&gt; &#123;</span><br><span class="line">      response.data = <span class="built_in">JSON</span>.parse(response.data)</span><br><span class="line">      resolve(response)</span><br><span class="line">    &#125;, (response) =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> error = &#123;</span><br><span class="line">        message: response.error</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 打印错误</span></span><br><span class="line">      <span class="built_in">console</span>.error(error.message)</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>这样的修改可以使 request 的调用方法不变，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import request from 'file/path'</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">'/get/demo'</span>,</span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    token: <span class="string">'SJCU5VFS8C5SC2F'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    username: account,</span><br><span class="line">    password: passwd</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(response))</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理错误</span></span><br><span class="line">  <span class="built_in">console</span>.error(error.message)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>修改之后的文件只能在 cordava 的 <code>deviceready</code> 事件触发之后调用(否则 <code>Vue.$cordova 为 undefined</code>)，所以最好像按下面这样加载 Vue 实例(如果提前调用 <code>import App from &#39;./App&#39;</code>，上面的代码会被提前加载)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 Vue 实例</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'deviceready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    components: &#123; <span class="attr">App</span>: <span class="built_in">require</span>(<span class="string">'./App'</span>).default &#125;,</span><br><span class="line">    router: <span class="built_in">require</span>(<span class="string">'./router'</span>).default,</span><br><span class="line">    store: <span class="built_in">require</span>(<span class="string">'./store'</span>).default,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">  &#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/cordova-vue.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于 Vue 项目，官方建议的网络请求工具是 Axios，但在 Vue 项目和 cordova 集成的时候，我发现想要更改网络请求的 header 并不是一件很简单的事(比如修改 User-Agent)，cordova 对 Axios 发出的请求似乎还添加了一层封装。为了修改 User-Agent，不得已最后还是使用了 cordova 自己的 http 插件：&lt;a href=&quot;https://github.com/sfelipegp/cordova-plugin-advanced-http&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cordova-plugin-advanced-http&lt;/a&gt;.&lt;br&gt;不难发现 Axios 是使用的 Promise 实现异步网络请求，而 cordova-plugin-advanced-http 使用的却是函数回调。所以实现这个转换最关键问题其实是如何将函数回调替换为 Promise.&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Vue" scheme="https://cs-tao.github.io/blog/tags/Vue/"/>
    
      <category term="cordova" scheme="https://cs-tao.github.io/blog/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>Travis CI 自动化部署 Cordova 工程</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Travis-CI-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2-Cordova-%E5%B7%A5%E7%A8%8B/"/>
    <id>https://cs-tao.github.io/blog/技术相关/Travis-CI-自动化部署-Cordova-工程/</id>
    <published>2018-10-10T14:50:34.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/26.png" width="45%" height="45%"></p><p>前些时间心血来潮，开发了一款针对武汉大学图书馆预约系统的桌面端抢座软件(使用 Electron + Vue 搭建)，发布之后，有很多同学向我反映说想要 Android 版本的。</p><p>虽然利用 Cordova/PhoneGap 将网页打包为 Android 安装包并不是一件很复杂的事，但在笔记本上安装 Android 的开发环境实在让人崩溃。</p><p>但出于对用户需求的尊重，我还是开始了将网页打包为 Apk 的挖坑之旅，项目链接：<a href="https://github.com/CS-Tao/whu-library-seat-mobile" target="_blank" rel="noopener">https://github.com/CS-Tao/whu-library-seat-mobile</a>。</p><p>本文用于记录在本项目中利用 Travis CI 持续集成和部署的配置代码。<br><a id="more"></a></p><h3 id="以-node-js-为主环境的配置方法"><a href="#以-node-js-为主环境的配置方法" class="headerlink" title="以 node.js 为主环境的配置方法"></a>以 node.js 为主环境的配置方法</h3><p>本方法的构建和部署耗时 580s 左右，构建日志：<a href="https://travis-ci.com/CS-Tao/whu-library-seat-mobile/builds/88561677" target="_blank" rel="noopener">https://travis-ci.com/CS-Tao/whu-library-seat-mobile/builds/88561677</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cordova/node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line"><span class="attr">  apt:</span></span><br><span class="line"><span class="attr">    sources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ubuntu-toolchain-r-test</span></span><br><span class="line"><span class="attr">    packages:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">g++-4.8</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">openjdk-7-jdk</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lib32stdc++6</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">lib32z1</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="string">CXX=g++-4.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="bullet">--cwd</span> <span class="string">cordova</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="comment"># 添加 android 环境</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="string">android-sdk</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">wget</span> <span class="bullet">-P</span> <span class="string">android-sdk</span> <span class="bullet">-q</span> <span class="attr">https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tar</span> <span class="bullet">-xf</span> <span class="string">./android-sdk/android-sdk_r24.4.1-linux.tgz</span> <span class="bullet">-C</span> <span class="string">./android-sdk</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">echo</span> <span class="string">y</span> <span class="string">| ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter platform-tools</span></span><br><span class="line"><span class="string">  - echo y | ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter build-tools-26.0.2</span></span><br><span class="line"><span class="string">  - echo y | ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter android-27</span></span><br><span class="line"><span class="string">  - echo y | ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter extra-android-support</span></span><br><span class="line"><span class="string">  - echo y | ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter extra-android-m2repository</span></span><br><span class="line"><span class="string">  - echo y | ./android-sdk/android-sdk-linux/tools/android update sdk --no-ui --all --filter extra-google-m2repository</span></span><br><span class="line"><span class="string">  - export ANDROID_HOME=$PWD/android-sdk/android-sdk-linux</span></span><br><span class="line"><span class="string">  - export PATH=$&#123;PATH&#125;:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/26.0.2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">cordova/</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">cordova</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">platform</span> <span class="string">add</span> <span class="string">android</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">prepare</span> <span class="string">android</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">build</span> <span class="string">android</span> <span class="bullet">--release</span> <span class="bullet">--</span> <span class="bullet">--keystore="release-key.keystore"</span> <span class="bullet">--alias=whu-library-seat-mobile</span> <span class="bullet">--storePassword=$&#123;STORE_PASSWORD&#125;</span> <span class="bullet">--password=$&#123;PASSWORD&#125;</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mv</span> <span class="string">./platforms/android/app/build/outputs/apk/release/app-release.apk</span> <span class="string">whu-library-seat-mobile_$&#123;TRAVIS_TAG&#125;.apk</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">releases</span></span><br><span class="line"><span class="attr">  skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  overwrite:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  api_key:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">"whu-library-seat-mobile_$&#123;TRAVIS_TAG&#125;.apk"</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>源文件链接：<a href="https://github.com/CS-Tao/whu-library-seat-mobile/blob/3c67e5889c7fd1d3a05db23928cbfb0f17a20fc6/.travis.yml" target="_blank" rel="noopener">.travis.yml</a></p><h3 id="以-android-为主环境的配置方法"><a href="#以-android-为主环境的配置方法" class="headerlink" title="以 android 为主环境的配置方法"></a>以 android 为主环境的配置方法</h3><p>本方法的构建和部署耗时 450s 左右，构建日志：<a href="https://travis-ci.com/CS-Tao/whu-library-seat-mobile/builds/89426551" target="_blank" rel="noopener">https://travis-ci.com/CS-Tao/whu-library-seat-mobile/builds/89426551</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"></span><br><span class="line"><span class="attr">language:</span> <span class="string">android</span></span><br><span class="line"></span><br><span class="line"><span class="attr">android:</span></span><br><span class="line"><span class="attr">  components:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">tools</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">build-tools-26.0.2</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">android-27</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">extra-android-m2repository</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">extra-android-support</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">extra-google-m2repository</span></span><br><span class="line"><span class="attr">  licenses:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'android-sdk-license.*'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">cordova/node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="comment"># 添加 node.js 环境</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">curl</span> <span class="bullet">-sL</span> <span class="attr">https://deb.nodesource.com/setup_8.x</span> <span class="string">| sudo -E bash -</span></span><br><span class="line"><span class="string">  - sudo apt-get install nodejs</span></span><br><span class="line"><span class="string">  - curl -o- -L https://yarnpkg.com/install.sh | bash</span></span><br><span class="line"><span class="string">  - source ~/.bashrc</span></span><br><span class="line"><span class="string">  - node -v &amp;&amp; npm -v &amp;&amp; yarn -v</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="bullet">--cwd</span> <span class="string">cordova</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">cordova/</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">sudo</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">cordova</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="bullet">-v</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">platform</span> <span class="string">add</span> <span class="string">android</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">prepare</span> <span class="string">android</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cordova</span> <span class="string">build</span> <span class="string">android</span> <span class="bullet">--release</span> <span class="bullet">--</span> <span class="bullet">--keystore="release-key.keystore"</span> <span class="bullet">--alias=whu-library-seat-mobile</span> <span class="bullet">--storePassword=$&#123;STORE_PASSWORD&#125;</span> <span class="bullet">--password=$&#123;PASSWORD&#125;</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mv</span> <span class="string">./platforms/android/app/build/outputs/apk/release/app-release.apk</span> <span class="string">whu-library-seat-mobile_$&#123;TRAVIS_TAG&#125;.apk</span></span><br><span class="line">  <span class="comment"># - zipalign -v 4 ./platforms/android/app/build/outputs/apk/release/app-release.apk whu-library-seat-mobile_$&#123;TRAVIS_TAG&#125;.apk</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">releases</span></span><br><span class="line"><span class="attr">  skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  overwrite:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  api_key:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">"whu-library-seat-mobile_$&#123;TRAVIS_TAG&#125;.apk"</span></span><br><span class="line"><span class="attr">  on:</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>源文件链接：<a href="https://github.com/CS-Tao/whu-library-seat-mobile/blob/c55bf899c486b527ca621a21ed150b14019eb6f5/.travis.yml" target="_blank" rel="noopener">.travis.yml</a></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote><p>请在 Travis CI 的网站中设置<code>$GH_TOKEN</code>环境变量并设置为不可见(默认便是不可见)，该环境变量是 GitHub 的<code>Personal access token</code>。</p></blockquote><blockquote><p>代码中的<code>yarn build</code>命令用于将生产版本的网页放入 cordova 项目的<code>www</code>文件夹中。代码中的<code>${STORE_PASSWORD}</code>和<code>${PASSWORD}</code>环境变量为下面这条命令需要输入的两个密码，也应该添加到 Travis CI 的网站中，并设置为不可见。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 cordova 项目的根目录中生成 release-key.keystore 文件</span></span><br><span class="line">keytool -genkey -v -keystore release-key.keystore -<span class="built_in">alias</span> whu-library-seat-mobile -keyalg RSA -keysize 2048 -validity 10000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/26.png&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;&lt;/p&gt;
&lt;p&gt;前些时间心血来潮，开发了一款针对武汉大学图书馆预约系统的桌面端抢座软件(使用 Electron + Vue 搭建)，发布之后，有很多同学向我反映说想要 Android 版本的。&lt;/p&gt;
&lt;p&gt;虽然利用 Cordova/PhoneGap 将网页打包为 Android 安装包并不是一件很复杂的事，但在笔记本上安装 Android 的开发环境实在让人崩溃。&lt;/p&gt;
&lt;p&gt;但出于对用户需求的尊重，我还是开始了将网页打包为 Apk 的挖坑之旅，项目链接：&lt;a href=&quot;https://github.com/CS-Tao/whu-library-seat-mobile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/CS-Tao/whu-library-seat-mobile&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文用于记录在本项目中利用 Travis CI 持续集成和部署的配置代码。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="travis-ci" scheme="https://cs-tao.github.io/blog/tags/travis-ci/"/>
    
      <category term="cordava" scheme="https://cs-tao.github.io/blog/tags/cordava/"/>
    
      <category term="android" scheme="https://cs-tao.github.io/blog/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>遥感院 2018 年夏令营成绩分析</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E9%81%A5%E6%84%9F%E9%99%A2-2018-%E5%B9%B4%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%88%90%E7%BB%A9%E5%88%86%E6%9E%90/"/>
    <id>https://cs-tao.github.io/blog/技术相关/遥感院-2018-年夏令营成绩分析/</id>
    <published>2018-07-18T16:05:15.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>2018 年武汉大学遥感信息工程学院夏令营成绩的散点图矩阵，供日后有意参加我们院夏令营的同学们参考</p><p>可视化的变量包括<code>机试成绩</code>、<code>面试成绩</code>、<code>背景评分</code>、<code>综合分数</code></p><blockquote><p>优秀营员共 120 名(161 位同学参营)。机试成绩占 40%，面试成绩占 30%，背景评分占 30 %</p></blockquote><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/25.png" alt="2018 年武汉大学遥感信息工程学院夏令营成绩的散点图矩阵"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018 年武汉大学遥感信息工程学院夏令营成绩的散点图矩阵，供日后有意参加我们院夏令营的同学们参考&lt;/p&gt;
&lt;p&gt;可视化的变量包括&lt;code&gt;机试成绩&lt;/code&gt;、&lt;code&gt;面试成绩&lt;/code&gt;、&lt;code&gt;背景评分&lt;/code&gt;、&lt;code&gt;综合分数&lt;/code&gt;&lt;
      
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="数据可视化" scheme="https://cs-tao.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Git WorkFlow 小记</title>
    <link href="https://cs-tao.github.io/blog/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Git-WorkFlow-%E5%B0%8F%E8%AE%B0/"/>
    <id>https://cs-tao.github.io/blog/软件开发/Git-WorkFlow-小记/</id>
    <published>2018-06-23T04:22:37.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/22.png" width="45%" height="45%"><br>什么是 workflow？workflow 就是工作流，即工作的流程，是一个软件过程模型的体现。因为 git 不同分支的交叠，便构成了具有 git 特色的工作流。一个良好的工作流可以让我们的项目历史清晰明了，有利于更好的代码管理。利用 git 的分支管理功能，可以将软件生命周期的各个过程归并到各个分支上，实现软件开发过程中各个操作的隔离。<br>在项目开发过程中，工作流是一个准则，由开发者自己定义，并自行遵守。本篇文章主要用于督促自己养成一个良好的开发习惯。<br><a id="more"></a></p><h3 id="各个分支的使用"><a href="#各个分支的使用" class="headerlink" title="各个分支的使用"></a>各个分支的使用</h3><p>Git workflow 分为五个分支，包括 <code>master</code>、<code>develop</code>、<code>release</code>、<code>hotfix</code> 和 <code>feature</code>，如下图：<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/21.png" width="65%" height="65%"></p><h4 id="长期分支"><a href="#长期分支" class="headerlink" title="长期分支"></a>长期分支</h4><p>在代码的中央仓库一直存在两个主要分支：<code>master</code> 和 <code>develop</code>。</p><p>其他仓库(非中央仓库)的这两个分支应当始终和中央仓库保持一致，在每次向中央仓库的对应分支合并时，应当先确认中央仓库的对应分支(下面简称中央分支)没有新的提交，如果有新的提交，应当先把本分支的<code>基</code>设置为中央分支的最新提交，即使用 <code>rebase</code> 将中央分支与本分支合并，再将本分支合并(merge)到中央分支。</p><ul><li><code>master</code> 用于管理发布版本，每次 commit (其他分支向它合并形成的 merge commit)应当对应一个 Tag，也就是形成一个发布版。</li><li><code>develop</code> 用于管理开发版本，所有的开发都会汇总到这个分支。</li></ul><h4 id="短期分支"><a href="#短期分支" class="headerlink" title="短期分支"></a>短期分支</h4><p>短期分支可以同时存在多个(当然命名不能重复)，每个分支使用完应当被删除掉，包括<code>release</code>、<code>hotfix</code> 和 <code>feature</code>。</p><ul><li><code>release</code> 用于在正式发布之前的预发布版本，在这个版本中的提交都应当是修复 Bug，不能在本分支上开发新的功能。本分支应当从 <code>develop</code> 检出，Bug 修复之后合并(merge)到 <code>develop</code> 和 <code>master</code>。</li><li><p><code>feature</code> 用于新功能的开发，可以有多个。本分支应当从 <code>develop</code> 分支检出，功能开发完成后合并(merge)到 <code>develop</code>。</p><blockquote><p>在 <code>release</code> 和 <code>feature</code> 两个分支的开发过程中，如果 <code>develop</code> 分支有更新，可以选择不合并 <code>develop</code>，如果一定要合并。应当使用 <code>git rebase</code> 进行合并，即将 <code>feature</code> 的<code>基</code>和 <code>develop</code> 的最新提交保持一致。</p></blockquote></li><li><p><code>hotfix</code> 用于在版本发布之后的紧急 Bug 修复。本分支应当从 <code>master</code> 分支检出，在 Bug 修复之后直接合并(merge)到 <code>master</code> 和 <code>develop</code>。</p></li></ul><h3 id="合并命令"><a href="#合并命令" class="headerlink" title="合并命令"></a>合并命令</h3><p>合并命令分为 merge 命令和 rebase 命令，在没有特别说明的情况下的合并命令一般指 merge 命令。</p><h4 id="Merge-命令"><a href="#Merge-命令" class="headerlink" title="Merge 命令"></a>Merge 命令</h4><p>Merge 命令可以让两个分支合并，但可能产生合并提交(merge commit)，在项目中一般都会使用 merge 命令进行分支的合并，但如果在某些情况下不想产生合并提交，则不应该使用这个命令。以将 <code>feature-1</code> 合并到 <code>develop</code> 为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 develop 分支</span></span><br><span class="line">git checkout develop</span><br><span class="line"><span class="comment"># 策略合并 feature 分支</span></span><br><span class="line">git merge --no-ff feature-1</span><br><span class="line"><span class="comment"># 删除原分支</span></span><br><span class="line">git branch -d feature-1</span><br><span class="line"><span class="comment"># 推送 develop 分支到远程仓库</span></span><br><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></p><h4 id="Rebase-命令"><a href="#Rebase-命令" class="headerlink" title="Rebase 命令"></a>Rebase 命令</h4><p>Rebase 命令和它的字面意思一样，会改变该分支的<code>基</code>，它会将该分支的<code>基</code>变为另一个分支的最新的提交，<code>基</code>是一个分支在另一个分支中分叉后的的第一个提交。rebase 命令不会像 merge 命令那样产生合并提交，它会通过移动一个分支在另一个分支上分叉后的所有提交，形成一个完美的线性历史。例如，在 <code>feature-1</code> 的开发过程中需要将 <code>develop</code> 合并，但不希望合并提交的产生，便可以使用 rebase 命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不在 feature-1 分支，切换到 feature-1 分支</span></span><br><span class="line">git checkout feature-1</span><br><span class="line"><span class="comment"># 合并(rebase) develop 分支</span></span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure></p><p>如果 <code>feature</code> 分支的提交太乱(比如有很多 <em>Fix bug</em>)，可以使用交互式 rebase 命令对 <code>feature</code> 分支的提交进行重构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不在 feature-1 分支，切换到 feature-1 分支</span></span><br><span class="line">git checkout feature-1</span><br><span class="line"><span class="comment"># 交互式合并(rebase) develop 分支</span></span><br><span class="line">git rebase -i develop</span><br></pre></td></tr></table></figure></p><p>使用 <code>-i</code> 参数可以启动交互式的 rebase，它会打开一个文本编辑器，显示所有被移动的提交:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 34b6aca 这是 feature 分支的第一次提交</span><br><span class="line">pick 2bb57ac 修复第一次提交的 Bug</span><br><span class="line">pick 233dc11 添加一个新功能</span><br></pre></td></tr></table></figure></p><p>我们可以对这段代码进行编辑：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick 34b6aca 这是 feature 分支的第一次提交</span><br><span class="line">fixup 2bb57ac 修复第一次提交的 Bug</span><br><span class="line">pick 233dc11 添加一个新功能</span><br></pre></td></tr></table></figure></p><p>这样在最终形成的 <code>feature</code> 分支中便不会显示 <code>2bb57ac</code> 这次提交了(和之前的提交合并为一个新的提交)。当我们打开交互式 rebase 的时候，在注释里还可以看到其它功能的说明，利用这些功能我们可以随意地更改提交历史</p><p>拉取并合并远程分支时使用 rebase 命令可以避免可能产生的合并提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 采用 rebase 命令拉取并合并远程分支</span></span><br><span class="line">git pull origin develop --rebase</span><br></pre></td></tr></table></figure></p><p>因为 <code>git pull</code> 命令是 <code>git fetch</code> 命令和 <code>git merge</code> 命令的语法糖，加上 <code>--rebase</code> 参数会使合并过程采用 rebase 命令合并。</p><h4 id="合并提交的产生"><a href="#合并提交的产生" class="headerlink" title="合并提交的产生"></a>合并提交的产生</h4><p>合并提交(merge commit)可以将一个分支上的多个提交整合为一个，然后合并到另一个分支。如果两个分支没有出现分叉，这两个分支的合并是不会产生合并提交的。如果出现了分叉，它们的的合并(merge)一定会产生合并提交。</p><h3 id="合并准则"><a href="#合并准则" class="headerlink" title="合并准则"></a>合并准则</h3><h4 id="不能反向合并"><a href="#不能反向合并" class="headerlink" title="不能反向合并"></a>不能反向合并</h4><p>从上文我们可以看出，git workflow 中的五个分支是有一定服务关系的，其服务关系如下：</p><ul><li><code>feature</code> -&gt; <code>develop</code></li><li><code>release</code> -&gt; <code>develop</code> &amp; <code>master</code></li><li><code>develop</code> -&gt; <code>master</code></li><li><code>hotfix</code> -&gt; <code>develop</code> &amp; <code>master</code></li></ul><p>在团队协作时，会有一定的服务关系，一般是非中心仓库的分支为中心仓库的分支服务。</p><p>这里提到的<strong>不能反向合并</strong>即不能把被服务分支合并(merge)到服务分支(例如不能将 <code>develop</code> 合并到 <code>feature</code>)。当然，如果在开发过程中一定要反向合并，应当使用 rebase 合并。</p><h4 id="采用策略合并"><a href="#采用策略合并" class="headerlink" title="采用策略合并"></a>采用策略合并</h4><p>在<a href="#Merge 命令">Merge 命令</a>中我们使用了 <code>--no-ff</code> 参数，这会让 git 的合并(merge)操作不采用 <code>Fast-Forward</code> 的合并方式，而是采用策略合并，这样的合并可以保留分支间的合并历史，如下图：<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/20.png" width="65%" height="65%"></p><h4 id="在-GitHub-上-Review"><a href="#在-GitHub-上-Review" class="headerlink" title="在 GitHub 上 Review"></a>在 GitHub 上 Review</h4><p>GitHub 提供的 Pull Request (简称“PR”)为我们提供了很好的代码合并的工具，开发者可以通过 PR 向自己的仓库或其他协助者的仓库发起合并请求。而且在这个合并请求中，我们可以对每次提交的具体内容和文件的更改情况进行 Review。例如我们可以在 GitHub 上执行 <code>release</code> 分支向 <code>master</code> 和 <code>develop</code> 分支的合并，并且在合并完成后添加发布版本到 GitHub 上。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="http://zhoulingyu.com/2017/05/08/Git-Work-Flow/" target="_blank" rel="noopener">简介我的 Git Work Flow</a></li><li><a href="https://blog.csdn.net/qq_32452623/article/details/78905181" target="_blank" rel="noopener">Git 三大特色之 WorkFlow</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/22.png&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;&lt;br&gt;什么是 workflow？workflow 就是工作流，即工作的流程，是一个软件过程模型的体现。因为 git 不同分支的交叠，便构成了具有 git 特色的工作流。一个良好的工作流可以让我们的项目历史清晰明了，有利于更好的代码管理。利用 git 的分支管理功能，可以将软件生命周期的各个过程归并到各个分支上，实现软件开发过程中各个操作的隔离。&lt;br&gt;在项目开发过程中，工作流是一个准则，由开发者自己定义，并自行遵守。本篇文章主要用于督促自己养成一个良好的开发习惯。&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/blog/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="git" scheme="https://cs-tao.github.io/blog/tags/git/"/>
    
      <category term="workflow" scheme="https://cs-tao.github.io/blog/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中手动触发 window.onresize() 函数</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Vue%E4%B8%AD%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91window-onresize%E5%87%BD%E6%95%B0/"/>
    <id>https://cs-tao.github.io/blog/技术相关/Vue中手动触发window-onresize函数/</id>
    <published>2018-05-19T14:47:25.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 Vue 静态方法, 在全局通过调用 Vue.triggerResize() 触发</span></span><br><span class="line">Vue.triggerResize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>)</span><br><span class="line">  e.initEvent(<span class="string">'resize'</span>, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="built_in">window</span>.dispatchEvent(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 Vue 实例方法, 在 Vue 实例中通过调用 this.$triggerResize() 触发</span></span><br><span class="line">Vue.prototype.$triggerResize = Vue.triggerResize</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Vue" scheme="https://cs-tao.github.io/blog/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Docker 入门小记</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Docker%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://cs-tao.github.io/blog/技术相关/Docker入门小记/</id>
    <published>2018-03-05T07:56:20.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker.png" width="45%" height="45%"></p><p>原本是准备寒假在家学习 Docker 的，但很无奈的是，回到家的我完全不知道如何写下新年的第一段代码。<br>说来也巧，回到学校后，由于某些不可抗力，搁置已久的消防项目又得开始了，原来负责服务器端 Docker 部署的某大神学长外出实习，重新部署 Docker 服务的任务就落在了我的头上(无奈.jpg)。<br>我原本是不准备记录下这篇文章的，但是当我写完了 Dockerfile，向服务器部署的时候发现，这次部署可能需要 —— 三个小时？一个人在图书馆坐着，像看剧一样地看着命令终端不断输出完成进度，实在无聊，就想着把最近两天学到的知识记录一下吧。<br><a id="more"></a></p><h3 id="Docker-是什么？"><a href="#Docker-是什么？" class="headerlink" title="Docker 是什么？"></a>Docker 是什么？</h3><p>Docker 是 DotCloud 公司开发的基于 LXC(Linux Container，一种内核虚拟化技术)的高级容器引擎，go 语言编写，使用 Apache 2.0 开源协议，源代码托管在 Github 上。</p><h3 id="Docker-原理"><a href="#Docker-原理" class="headerlink" title="Docker 原理"></a>Docker 原理</h3><p>我们可以发现近几年云计算非常流行，那么云计算是什么东西呢？</p><blockquote><p>云计算是指通过互联网提供动态易扩展且经常是虚拟化的资源，被划分为IaaS(Infrastructure as a Service)、PaaS(Platform as a Service)、SaaS(Software as a Service)。</p></blockquote><p>但其中 PaaS 既不如 IaaS 那样灵活而自由，也不如 SaaS 那样可以直接推向消费者。有人说 PaaS 是未来的云计算，但是近几年 IaaS 和 SaaS 各自发展，反而是 PaaS 几乎裹足不前，虽然各种应用引擎层出不穷，但是没有什么人专门为 PaaS 开发应用。</p><p>这个时候 Docker 的出现完美地解决了这个问题，Docker 很好地实现了 PaaS，如果把云计算比作货轮的话，Docker 就是放在货轮上的集装箱了。</p><p>最开始我以为 Docker 和虚拟机差不多，因为都实现了虚拟化，而且都是可移植的。但是之后在各大技术交流平台上探索，我发现，这两个技术在本质上是有区别的，虚拟机直接面向了硬件层，而 Docker 则是面向操作系统层，它的出现和发展得益于 Linux 系统的 Namespace 机制和 CGroup 机制，这两个机制保证了 Docker 容器和外部环境的隔离，保障了 PaaS 的安全性。</p><ul><li>Namespace 机制</li></ul><p>Namespace（命名空间）机制是 Linux 为我们提供的用于分离进程树、网络接口、挂载点以及进程间通信等资源的方法。在日常使用 Linux 或者 macOS 时，我们并没有运行多个完全分离的服务器的需要，但是如果我们在服务器上启动了多个服务，这些服务其实会相互影响的，每一个服务都能看到其他服务的进程，也可以访问宿主机器上的任意文件，这是很多时候我们都不愿意看到的，我们更希望运行在同一台机器上的不同服务能做到完全隔离，就像运行在多台不同的机器上一样。Docker 便是通过 Linux 的 Namespaces 对不同的容器实现了这样的隔离。</p><ul><li>CGroup 机制</li></ul><p>我们通过 Linux 的命名空间为新创建的进程隔离了文件系统、网络并与宿主机器之间的进程相互隔离，但是命名空间并不能够为我们提供物理资源上的隔离，比如 CPU 或者内存，如果在同一台机器上运行了多个对彼此以及宿主机器一无所知的『容器』，这些容器却共同占用了宿主机器的物理资源。</p><p>如果其中的某一个容器正在执行 CPU 密集型的任务，那么就会影响其他容器中任务的性能与执行效率，导致多个容器相互影响并且抢占资源。如何对多个容器的资源使用进行限制就成了解决进程虚拟资源隔离之后的主要问题，而 Control Groups(简称 CGroups)就是能够隔离宿主机器上的物理资源，例如 CPU、内存、磁盘 I/O 和网络带宽。</p><blockquote><p>在 CGroup 中，所有的任务就是一个系统的一个进程，而 CGroup 就是一组按照某种标准划分的进程，在 CGroup 这种机制中，所有的资源控制都是以 CGroup 作为单位实现的，每一个进程都可以随时加入一个 CGroup 也可以随时退出一个 CGroup。</p><p align="right">—— <a href="https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html" target="_blank" rel="noopener">CGroup 介绍、应用实例及原理描述</a></p><p></p></blockquote><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><h4 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h4><p>关于不同操作系统 Docker 的安装方法，<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker 的官方文档</a>写得很详细，因为 Docker 官方推荐使用 Ubuntu 部署 Docker(Ubuntu 系统本身就实现了Docker容器运行需要的 AUFS 机制)，所以这里只记录一下 Ubuntu 16.04 系统下 Docker CE 的安装。</p><ul><li><p>更新apt包索引</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装软件包，用于允许 apt 通过 HTTPS 访问 Docker 安装源</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加 Docker 的官方 GPG 密钥：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>  确认一下您已经获取到了指纹：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line"></span><br><span class="line">pub   4096R/0EBFCD88 2017-02-22</span><br><span class="line">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R/F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure></li><li><p>添加储存库：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line"><span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">stable"</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h4><ul><li><p>更新 apt 包索引</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装Docker CE</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li></ul><h3 id="Docker-命令记录"><a href="#Docker-命令记录" class="headerlink" title="Docker 命令记录"></a>Docker 命令记录</h3><p>因为 Docker 的运行绑定了<code>/var/run/docker.sock</code>文件，用于 docker 的守护进程(Docker daemon)和容器进程之间通信，而该文件的访问权限为 660，必须使用 sudo 命令才有该文件的执行权限。</p><h4 id="容器的生命周期管理"><a href="#容器的生命周期管理" class="headerlink" title="容器的生命周期管理"></a>容器的生命周期管理</h4><ul><li>run：Run a command in a new container</li><li>start：Start one or more stopped containers</li><li>stop：Stop one or more running containers</li><li>restart：Restart one or more containers</li><li>kill：Kill one or more running containers</li><li>rm：Remove one or more containers</li><li>pause：Pause all processes within one or more containers</li><li>unpause：Unpause all processes within one or more containers</li><li>create：Create a new container</li><li>exec：Run a command in a running container</li></ul><h4 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h4><ul><li>ps：List containers</li><li>inspect：Return low-level information on Docker objects</li><li>top：Display the running processes of a container</li><li>attach：Attach local standard input, output, and error streams to a running container</li><li>events：Get real time events from the server</li><li>logs：Fetch the logs of a container</li><li>wait：Block until one or more containers stop, then print their exit codes</li><li>export：Export a container’s filesystem as a tar archive</li><li>port：List port mappings or a specific mapping for the container</li></ul><h4 id="容器-rootfs-命令"><a href="#容器-rootfs-命令" class="headerlink" title="容器 rootfs 命令"></a>容器 rootfs 命令</h4><ul><li>commit：Create a new image from a container’s changes</li><li>cp：Copy files/folders between a container and the local filesystem</li><li>diff：Inspect changes to files or directories on a container’s filesystem</li></ul><h4 id="镜像仓库操作"><a href="#镜像仓库操作" class="headerlink" title="镜像仓库操作"></a>镜像仓库操作</h4><ul><li>login：Log in to a Docker registry</li><li>logout：Log out from a Docker registry</li><li>pull：Pull an image or a repository from a registry</li><li>push：Push an image or a repository to a registry</li><li>search：Search the Docker Hub for images</li></ul><h4 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h4><ul><li>images：List images</li><li>rmi：Remove one or more images</li><li>tag：Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</li><li>build：Build an image from a Dockerfile</li><li>history：Show the history of an image</li><li>save：Save one or more images to a tar archive (streamed to STDOUT by default)</li><li>import：Import the contents from a tarball to create a filesystem image</li></ul><h4 id="Docker-信息"><a href="#Docker-信息" class="headerlink" title="Docker 信息"></a>Docker 信息</h4><ul><li>info：Display system-wide information</li><li>version：Show the Docker version information</li></ul><h3 id="Dockerfile、Daemon-进程、镜像、容器之间的关系"><a href="#Dockerfile、Daemon-进程、镜像、容器之间的关系" class="headerlink" title="Dockerfile、Daemon 进程、镜像、容器之间的关系"></a>Dockerfile、Daemon 进程、镜像、容器之间的关系</h3><p>前两天看了本书《Docker 全攻略》，里面提到 Docker 的出现统一了三界（开发、测试、生产）。Dockerfile 面向开发，Docker 镜像可以直接交付给我们的甲方，Docker容器面向部署和运维。Daemon 进程是 Docker 运行的主进程，负责和容器间的通信。</p><p>我们使用 Docker，最后会得到一个运行状态的容器，简单来说，使用Docker大概的步骤是：编写 Dockerfile 生成镜像，启动镜像，然后可以得到容器。</p><p>也就是说，Dockerfile 是生成镜像和容器的原材料，它会被 Docker 解释器解释，生成指定的镜像，镜像是静态的文件，启动镜像便能得到运行的容器，镜像和容器之间的关系可以理解为一个已经关机的电脑和一个开机状态的电脑的关系，顺便我们可以把 Dockerfile 理解为给电脑装系统时的用到的 ISO 镜像。</p><p>接下来，本文会重点介绍一下镜像和容器之间的关系，参考自我前两天在网上一篇文章，文章的链接已附在文末。</p><h4 id="Docker-容器和镜像的关系"><a href="#Docker-容器和镜像的关系" class="headerlink" title="Docker 容器和镜像的关系"></a>Docker 容器和镜像的关系</h4><p>容器和镜像的大概关系可以参考下图：</p><p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/container.png" width="85%" height="85%"><br>如图，镜像是分层的文件，每一层都是只读的，其分层的方式类似于 git 的版本控制方式，除了最底层，每一层都会有它的父层，每一层都记录了和上一层的差异(diff)，而容器则是在顶层运行的一个可读写层。</p><p>现在，我们可以通过特定的命令来了解一下它们之间的关系。</p><ul><li><p><code>sudo docker create &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/create.jpg" width="85%" height="85%"><br><code>docker create</code>命令为指定的镜像(image)添加了一个可读写层，构成了一个新的容器，但这个容器并没有运行。<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/create1.png" width="85%" height="85%"></p></li><li><p><code>sudo docker start &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/start.jpg" width="85%" height="85%"><br><code>Docker start</code>命令为容器文件系统创建了一个进程隔离空间。注意，每一个容器只能够有一个进程隔离空间。</p></li><li><p><code>sudo docker run &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/run.jpg" width="85%" height="85%"><br>我们可以看到<code>docker start</code>命令和<code>docker run</code>命令都生成了容器，它们有什么区别呢？<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/start1.png" width="85%" height="85%"><br>从图片可以看出，<code>docker run</code>命令先是利用镜像创建了一个容器，然后运行这个容器。</p></li><li><p><code>sudo docker ps</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/ps.jpg" width="85%" height="85%"><br><code>docker ps</code>命令会列出所有运行中的容器。这隐藏了非运行态容器的存在，如果想要找出这些容器，我们需要使用下面这个命令。</p></li><li><p><code>sudo docker ps –a</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/psa.jpg" width="85%" height="85%"><br><code>docker ps –a</code>命令会列出所有的容器，不管是运行的，还是停止的。</p></li><li><p><code>sudo docker images</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/images.jpg" width="85%" height="85%"><br><code>docker images</code>命令会列出了所有顶层(top-level)镜像。</p></li><li><p><code>sudo docker images –a</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/imagesa.jpg" width="85%" height="85%"><br><code>docker images –a</code>命令列出了所有的镜像，也可以说是列出了所有的可读层。如果你想要查看某一个 image-id 下的所有层，可以使用<code>docker history</code>来查看。</p></li><li><p><code>sudo docker stop &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/stop.jpg" width="85%" height="85%"><br><code>docker stop</code>命令会向运行中的容器发送一个 SIGTERM 的信号，然后停止所有的进程。</p></li><li><p><code>sudo docker kill &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/kill.jpg" width="85%" height="85%"><br><code>docker kill</code>命令向所有运行在容器中的进程发送了一个不友好的 SIGKILL 信号。</p></li><li><p><code>sudo docker pause &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/pause.jpg" width="85%" height="85%"><br><code>docker stop</code>和<code>docker kill</code>命令会发送 UNIX 的信号给运行中的进程，<code>docker pause</code>命令则不一样，它利用了 cgroups 的特性将运行中的进程空间暂停。但是这种方式的不足之处在于发送一个 SIGTSTP 信号对于进程来说不够简单易懂，以至于不能够让所有进程暂停。</p></li><li><p><code>sudo docker rm &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/rm.jpg" width="85%" height="85%"><br><code>docker rm</code>命令会移除构成容器的可读写层。注意，这个命令只能对非运行态容器执行。</p></li><li><p><code>sudo docker rmi &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/rmi.jpg" width="85%" height="85%"><br><code>docker rmi</code>命令会移除构成镜像的一个只读层。你只能够使用<code>docker rmi</code>来移除最顶层(top level layer)(也可以说是镜像)，你也可以使用 -f 参数来强制删除中间的只读层。</p></li><li><p><code>sudo docker commit &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/commit.jpg" width="85%" height="85%"><br><code>docker commit</code>命令将容器的可读写层转换为一个只读层，这样就把一个容器转换成了不可变的镜像。<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/commit1.png" width="85%" height="85%"></p></li><li><p><code>sudo docker build</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/build.jpg" width="85%" height="85%"><br><code>docker build</code>命令它会反复的执行多个命令，如下图<br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/build1.png" width="85%" height="85%"><br><code>docker build</code>命令根据 Dockerfile 文件中的 FROM 指令获取到镜像，然后重复地 1) <code>run(create和start)</code>、2) <code>修改</code>、3) <code>commit</code>。在循环中的每一步都会生成一个新的层，因此许多新的层会被创建。</p></li><li><p><code>sudo docker exec &lt;running-container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/exec.jpg" width="85%" height="85%"><br><code>docker exec</code>命令会在运行中的容器执行一个新进程。</p></li><li><p><code>sudo docker inspect &lt;container-id&gt; or &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/inspect.jpg" width="85%" height="85%"><br><code>docker inspect</code>命令会提取出容器或者镜像最顶层的元数据。</p></li><li><p><code>sudo docker save &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/save.jpg" width="85%" height="85%"><br><code>docker save</code>命令会创建一个镜像的压缩文件，这个文件能够在另外一个主机的 Docker 上使用。和 export 命令不同，这个命令为每一个层都保存了它们的元数据。这个命令只能对镜像生效。</p></li><li><p><code>sudo docker export &lt;container-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/export.jpg" width="85%" height="85%"><br><code>docker export</code>命令创建一个tar文件，并且移除了元数据和不必要的层，将多个层整合成了一个层，只保存了当前统一视角看到的内容</p></li><li><p><code>sudo docker history &lt;image-id&gt;</code><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker/history.jpg" width="85%" height="85%"><br><code>docker history</code>命令递归地输出指定镜像的历史镜像。</p></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">官方文档</a></li><li><a href="http://dockone.io/article/2941" target="_blank" rel="noopener">Docker 核心技术与实现原理</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/1506_cgroup/index.html" target="_blank" rel="noopener">CGroup 介绍、应用实例及原理描述</a></li><li><a href="http://dockone.io/article/783" target="_blank" rel="noopener">10 张图带你深入理解 Docker 容器和镜像</a></li><li><a href="http://blog.csdn.net/zhousenshan/article/details/51501734" target="_blank" rel="noopener">Dockerfile、Docker 镜像和 Docker 容器的关系</a></li><li><a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">菜鸟教程 - Docker 命令大全</a></li><li><a href="http://cloud.51cto.com/art/201406/442131.htm" target="_blank" rel="noopener">为什么 Docker 如此受欢迎？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/docker.png&quot; width=&quot;45%&quot; height=&quot;45%&quot;&gt;&lt;/p&gt;
&lt;p&gt;原本是准备寒假在家学习 Docker 的，但很无奈的是，回到家的我完全不知道如何写下新年的第一段代码。&lt;br&gt;说来也巧，回到学校后，由于某些不可抗力，搁置已久的消防项目又得开始了，原来负责服务器端 Docker 部署的某大神学长外出实习，重新部署 Docker 服务的任务就落在了我的头上(无奈.jpg)。&lt;br&gt;我原本是不准备记录下这篇文章的，但是当我写完了 Dockerfile，向服务器部署的时候发现，这次部署可能需要 —— 三个小时？一个人在图书馆坐着，像看剧一样地看着命令终端不断输出完成进度，实在无聊，就想着把最近两天学到的知识记录一下吧。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="docker" scheme="https://cs-tao.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>远程git仓库的建立和配置</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/blog/技术相关/远程git仓库的建立和配置/</id>
    <published>2017-12-11T09:11:21.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gi2.png" width="20%" height="20%"></p><p>本文主要介绍如何建立远程 git 仓库以及如何在 gitweb 页面中显示仓库的描述信息，以 Ubuntu 16.04 LTS 操作系统为例。<br><a id="more"></a></p><h1 id="安装并配置-gitweb"><a href="#安装并配置-gitweb" class="headerlink" title="安装并配置 gitweb"></a>安装并配置 gitweb</h1><p>参考<a href="http://blog.cs-tao.cc/2017/10/19/gitweb%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">基于 Apache 服务器的 gitweb 安装和配置</a></p><h1 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h1><p>为了能在 gitweb 上查看仓库的信息，建议在 gitweb 的仓库根目录下新建文件夹（仓库根目录在 gitweb 的配置文件”/etc/gitweb.conf”中由”$projectroot”变量指定）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Test.git</span><br></pre></td></tr></table></figure><p>git 远程库目录建议带上 .git 后缀。</p><h1 id="更改文件夹权限并切换到用于远程-ssh-连接的用户"><a href="#更改文件夹权限并切换到用于远程-ssh-连接的用户" class="headerlink" title="更改文件夹权限并切换到用于远程 ssh 连接的用户"></a>更改文件夹权限并切换到用于远程 ssh 连接的用户</h1><p>因为我们用于连接私有 git 仓库的方法是 ssh 远程连接，我们以有远程 ssh 登录权限的用户 ‘CSTao’ 为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R CSTao:CSTao Test.git</span><br><span class="line">su CSTao</span><br></pre></td></tr></table></figure><blockquote><p>注意：本步骤和第一步的顺序可以交换，那么便可以不使用 chown 命令更改文件夹权限，只切换用户即可。这样做的原因是我新建的文件夹所在目录的权限不属于用户 CSTao，以 CSTao 用户新建文件夹会出现权限不足的警告。</p></blockquote><h1 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h1> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Test.git</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure><p> 和建立本地仓库的命令不一样的是，建立远程仓库其实建立了一个裸仓库，也就是不含文件信息，只有 git 的提交记录。</p><h1 id="配置描述信息"><a href="#配置描述信息" class="headerlink" title="配置描述信息"></a>配置描述信息</h1><h2 id="修改描述文件"><a href="#修改描述文件" class="headerlink" title="修改描述文件"></a>修改描述文件</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim description</span><br></pre></td></tr></table></figure><p> 写入描述信息即可</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config</span><br></pre></td></tr></table></figure><p> 在原有内容后添加<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[gitweb]</span><br><span class="line">        owner = CSTao &lt;whucstao@qq.com&gt;</span><br><span class="line">        URL = ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git</span><br></pre></td></tr></table></figure></p><p> 通过owner指定gitweb中owner的显示内容，通过URL指定gitweb中URL的显示内容，基本格式为”ssh://[ssh登录的用户名]@[host:ssh端口][远程主机中的仓库目录]”</p><h1 id="将远程裸仓库克隆到本地"><a href="#将远程裸仓库克隆到本地" class="headerlink" title="将远程裸仓库克隆到本地"></a>将远程裸仓库克隆到本地</h1><p> 在本地计算机的特定文件夹中执行：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://CSTao@39.108.171.209:22/home/git/repositories/Test.git</span><br></pre></td></tr></table></figure></p><h1 id="添加文件、提交更改、推送到远程"><a href="#添加文件、提交更改、推送到远程" class="headerlink" title="添加文件、提交更改、推送到远程"></a>添加文件、提交更改、推送到远程</h1><p>这部分内容为 git 的基本操作，不再赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gi2.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文主要介绍如何建立远程 git 仓库以及如何在 gitweb 页面中显示仓库的描述信息，以 Ubuntu 16.04 LTS 操作系统为例。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="git" scheme="https://cs-tao.github.io/blog/tags/git/"/>
    
      <category term="gitweb" scheme="https://cs-tao.github.io/blog/tags/gitweb/"/>
    
  </entry>
  
  <entry>
    <title>gitweb 安装和配置</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/gitweb%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://cs-tao.github.io/blog/技术相关/gitweb安装和配置/</id>
    <published>2017-10-19T07:35:55.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gitweb.png" width="20%" height="20%"></p><p>Apache 环境下的 gitweb 的安装和配置。<br><a id="more"></a></p><h1 id="gitweb-安装和配置（在别人的基础上做了一些添加和修改）"><a href="#gitweb-安装和配置（在别人的基础上做了一些添加和修改）" class="headerlink" title="gitweb 安装和配置（在别人的基础上做了一些添加和修改）"></a>gitweb 安装和配置（在别人的基础上做了一些添加和修改）</h1><p><a href="http://blog.csdn.net/qq_25667339/article/details/53083968" target="_blank" rel="noopener">参考文章</a></p><h2 id="安装-gitweb-和-Apache"><a href="#安装-gitweb-和-Apache" class="headerlink" title="安装 gitweb 和 Apache"></a>安装 gitweb 和 Apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitweb apache2</span><br></pre></td></tr></table></figure><h2 id="修改-etc-gitweb-conf"><a href="#修改-etc-gitweb-conf" class="headerlink" title="修改 /etc/gitweb.conf"></a>修改 /etc/gitweb.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitweb.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$projectroot</span> = <span class="string">"/home/git/repositories"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$git_temp</span> = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$projects_list</span> = <span class="variable">$projectroot</span>;</span><br><span class="line"></span><br><span class="line">@stylesheets = (<span class="string">"../gitweb/static/gitweb.css"</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$javascript</span> = <span class="string">"../gitweb/static/gitweb.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$logo</span> = <span class="string">"../gitweb/static/git-logo.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$favicon</span> = <span class="string">"../gitweb/static/git-favicon.png"</span>;</span><br><span class="line"></span><br><span class="line">@diff_opts = ();</span><br></pre></td></tr></table></figure><p>保存退出</p><h2 id="修改-etc-apache2-conf-available-gitweb-conf"><a href="#修改-etc-apache2-conf-available-gitweb-conf" class="headerlink" title="修改 /etc/apache2/conf-available/gitweb.conf"></a>修改 /etc/apache2/conf-available/gitweb.conf</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apache2/conf-available/gitweb.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Alias /gitweb /usr/share/gitweb</span><br><span class="line"><span class="tag">&lt;<span class="name">Directory</span> /<span class="attr">usr</span>/<span class="attr">share</span>/<span class="attr">gitweb</span>&gt;</span></span><br><span class="line">    Options +FollowSymLinks +ExecCGI</span><br><span class="line">    AddHandler cgi-script .cgi</span><br><span class="line">    AuthType Basic</span><br><span class="line">    AuthName "Restricted Content"</span><br><span class="line">    AuthUserFile /home/git/.htpasswd</span><br><span class="line">    Require valid-user</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存退出</p><p><code>注意：</code>“AuthUserFile”是认证文件位置，用如下命令生成认证文件并添加一个访问用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c 认证文件位置 用户名</span><br></pre></td></tr></table></figure><p>然后根据提示输入密码即可。</p><h2 id="使cgi生效"><a href="#使cgi生效" class="headerlink" title="使cgi生效"></a>使cgi生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod cgi</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><h2 id="访问gitweb"><a href="#访问gitweb" class="headerlink" title="访问gitweb"></a>访问gitweb</h2><p>如果搭建在本地，访问<a href="http://localhost/gitweb" target="_blank" rel="noopener">http://localhost/gitweb</a>并登录就可看到 gitweb 设置的 git 库根目录下的所有项目信息。</p><p>但此时访问<a href="localhost/cgi-bin/gitweb.cgi">http://localhost/cgi-bin/gitweb.cgi</a>不用登录也能访问到项目信息。我直接删除了”/usr/lib/cgi-bin/“文件夹中与 gitweb 相关的文件。其他人便不能通过该路径访问。</p><h2 id="配置布局"><a href="#配置布局" class="headerlink" title="配置布局"></a>配置布局</h2><p>可以使用别人已经写好的布局和图标，详见<a href="https://github.com/kogakure/gitweb-theme" target="_blank" rel="noopener">github</a></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>需要将”/usr/share/gitweb”文件夹下的文件和文件夹设置正确的权限，&lt;其他用户&gt;必须有读取文件权限和执行文件权限。缺少读文件的权限服务器会返回”Internal Server Error(500)”错误，缺少执行文件的权限服务器会返回”Forbidden(403)”错误。读取文件权限为4，执行文件权限为1，也就是说&lt;其他用户&gt;的权限至少为’5’。如下，这里设置的’755’权限的最后一个’5’对应&lt;其他用户&gt;的权限。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/gitweb/</span><br><span class="line">sudo chmod -R 755 .</span><br></pre></td></tr></table></figure></li><li><p>旧版本 Apache 的 /etc/apache2/conf.d/gitweb 和新版本的 /etc/apache2/conf-available/gitweb 的是同一个目录。</p></li></ul><h1 id="配置文件备忘"><a href="#配置文件备忘" class="headerlink" title="配置文件备忘"></a>配置文件备忘</h1><h2 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h2><ul><li>文件位置：”/etc/gitweb.conf”</li><li>文件功能：设置项目集根目录、临时文件目录、布局文件位置及资源文件位置等。</li></ul><h2 id="Apache中gitweb的配置"><a href="#Apache中gitweb的配置" class="headerlink" title="Apache中gitweb的配置"></a>Apache中gitweb的配置</h2><ul><li>文件位置：”/etc/apache2/conf-available/gitweb.conf”</li><li>文件功能：指定 CGI 文件位置、认证文件位置等。</li><li>主要内容：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfDefine</span> <span class="attr">ENABLE_GITWEB</span>&gt;</span></span><br><span class="line">    Alias /gitweb /usr/share/gitweb</span><br><span class="line">    <span class="tag">&lt;<span class="name">Directory</span> /<span class="attr">usr</span>/<span class="attr">share</span>/<span class="attr">gitweb</span>&gt;</span></span><br><span class="line">        Options +FollowSymLinks +ExecCGI</span><br><span class="line">        AddHandler cgi-script .cgi</span><br><span class="line">        AuthType Basic</span><br><span class="line">        AuthName "Restricted Content"</span><br><span class="line">        AuthUserFile /home/git/.htpasswd</span><br><span class="line">        Require valid-user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">IfDefine</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gitweb.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Apache 环境下的 gitweb 的安装和配置。&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="gitweb" scheme="https://cs-tao.github.io/blog/tags/gitweb/"/>
    
      <category term="Apache" scheme="https://cs-tao.github.io/blog/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>解决C#发送电子邮件失败的问题</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/%E8%A7%A3%E5%86%B3C-%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://cs-tao.github.io/blog/技术相关/解决C-发送电子邮件失败的问题/</id>
    <published>2017-10-18T00:21:15.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/mail.png" width="20%" height="20%"></p><p>本文记录了在 C# 环境下，如何利用 SMTP 邮箱服务发送邮件，以 QQ 邮箱为例<br><a id="more"></a></p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ul><li>配置 App.Config 文件<ul><li>在项目中添加<code>System.Configuration</code>程序集的引用</li><li>在 App.Config 文件中添加键值，如下（只需要关注 appSettings 标签内的内容）</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"entityFramework"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=*************"</span> <span class="attr">requirePermission</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">"v4.0"</span> <span class="attr">sku</span>=<span class="string">".NETFramework,Version=v4.5.2"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--邮箱--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NUM"</span> <span class="attr">value</span>=<span class="string">"123456789@qq.com"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮箱密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_PASSWORD"</span> <span class="attr">value</span>=<span class="string">"邮箱密码。QQ邮箱需要许可码"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--邮件显示名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MANAGER_MAIL_NAME"</span> <span class="attr">value</span>=<span class="string">"发送邮件使用的用户名"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--QQ邮箱对应的SMTP服务器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"SmtpClient_HOST"</span> <span class="attr">value</span>=<span class="string">"smtp.qq.com"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>EmailHelper.cs 文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Net.Mail;</span><br><span class="line">using static System.Configuration.ConfigurationManager;</span><br><span class="line"></span><br><span class="line">namespace View_Spot_of_City.UIControls.Helper</span><br><span class="line">&#123;</span><br><span class="line">    public static class EmailHelper</span><br><span class="line">    &#123;</span><br><span class="line">        public static bool SendEmail(string mail, string title, string content)</span><br><span class="line">        &#123;</span><br><span class="line">            MailMessage message = new MailMessage();</span><br><span class="line">            &#123;</span><br><span class="line">                message.To.Add(mail);</span><br><span class="line">                message.From = new MailAddress(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_NAME&quot;], Encoding.UTF8);</span><br><span class="line">                message.Subject =title;</span><br><span class="line">                message.SubjectEncoding = Encoding.UTF8;</span><br><span class="line">                message.Body = content;</span><br><span class="line">                message.BodyEncoding = Encoding.UTF8;</span><br><span class="line">                message.IsBodyHtml = false;</span><br><span class="line">                message.Priority = MailPriority.Normal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SmtpClient smtp = new SmtpClient();</span><br><span class="line">            &#123;</span><br><span class="line">                smtp.Host = AppSettings[&quot;SmtpClient_HOST&quot;];</span><br><span class="line">                smtp.EnableSsl = true;</span><br><span class="line">                smtp.UseDefaultCredentials = false;</span><br><span class="line">                smtp.Credentials = new System.Net.NetworkCredential(AppSettings[&quot;MANAGER_MAIL_NUM&quot;], AppSettings[&quot;MANAGER_MAIL_PASSWORD&quot;]);</span><br><span class="line">            &#125;</span><br><span class="line">            object userState = message;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                smtp.SendAsync(message, userState);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            catch(Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(ex.Message);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>若使用 QQ 邮箱，输入密码为许可码，需要在 QQ 邮箱中打开 SMTP 服务</p><ul><li>打开 QQ 邮箱网页版</li><li>点击左上角”设置”，并在导航栏中点击账户标签</li><li>开启 SMTP 服务并获得许可码<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/WpfSendMail.png" alt="开启 SMTP 服务"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/mail.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文记录了在 C# 环境下，如何利用 SMTP 邮箱服务发送邮件，以 QQ 邮箱为例&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="C#" scheme="https://cs-tao.github.io/blog/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Js利用百度地图API进行坐标转换</title>
    <link href="https://cs-tao.github.io/blog/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/Js%E5%88%A9%E7%94%A8%E7%99%BE%E5%BA%A6API%E8%BF%9B%E8%A1%8C%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <id>https://cs-tao.github.io/blog/技术相关/Js利用百度API进行坐标转换/</id>
    <published>2017-09-04T13:10:59.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/baidu-map.png" width="20%" height="20%"></p><p>在 JavaScript 中利用百度地图API对地理坐标系和投影坐标系(墨卡托)进行互转<br><a id="more"></a></p><h1 id="导入js文件"><a href="#导入js文件" class="headerlink" title="导入js文件"></a>导入js文件</h1><p>在html文件中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=1.2"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="地理坐标转为平面坐标"><a href="#地理坐标转为平面坐标" class="headerlink" title="地理坐标转为平面坐标"></a>地理坐标转为平面坐标</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</span><br><span class="line"><span class="keyword">var</span> mercatorPoint = projection.lngLatToPoint(<span class="keyword">new</span> BMap.Point(<span class="number">114.3908</span>, <span class="number">30.4879</span>));</span><br><span class="line">alert(<span class="string">"x = "</span> + mercatorPoint.x + <span class="string">", y = "</span> + mercatorPoint.y);</span><br></pre></td></tr></table></figure><h1 id="平面坐标转为地理坐标"><a href="#平面坐标转为地理坐标" class="headerlink" title="平面坐标转为地理坐标"></a>平面坐标转为地理坐标</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> projection = <span class="keyword">new</span> BMap.MercatorProjection();</span><br><span class="line"><span class="keyword">var</span> lngLat = projection.pointToLngLat(<span class="keyword">new</span> BMap.Pixel(<span class="number">12734064.16</span>, <span class="number">3544542.8</span>));</span><br><span class="line">alert(<span class="string">"lng = "</span> + lngLat.lng + <span class="string">", lat = "</span> + lngLat.lat);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/baidu-map.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 JavaScript 中利用百度地图API对地理坐标系和投影坐标系(墨卡托)进行互转&lt;br&gt;
    
    </summary>
    
      <category term="技术相关" scheme="https://cs-tao.github.io/blog/categories/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="JacaScript" scheme="https://cs-tao.github.io/blog/tags/JacaScript/"/>
    
  </entry>
  
  <entry>
    <title>GMap.net for WPF 使用心得</title>
    <link href="https://cs-tao.github.io/blog/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/GMap.net-for-WPF-%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://cs-tao.github.io/blog/软件开发/GMap.net-for-WPF-使用心得/</id>
    <published>2017-08-19T08:42:23.000Z</published>
    <updated>2019-04-12T06:54:15.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gmap.png" width="20%" height="20%"></p><p>本文记录了利用 GMap.net for WPF 绘制点线面的方式和在项目中遇到的对未指定长宽的要素与其他要素间相对定位的方式<br><a id="more"></a></p><h2 id="GMap-net概述"><a href="#GMap-net概述" class="headerlink" title="GMap.net概述"></a>GMap.net概述</h2><p><a href="https://greatmaps.codeplex.com/" title="进入GMap.NET的项目地址" target="_blank" rel="noopener">GMap.net</a>是一个强大、免费、跨平台、开源的 .NET 控件，它在 WinForm 和 WPF 环境中能够通过 Google, Yahoo!, Bing, OpenStreetMap, ArcGIS, Pergo, SigPac 等实现寻找路径、地理编码以及地图展示功能，并支持缓存和运行在 Mobile 环境中。<br>GMap.NET 是一个开源的GEO地图定位和跟踪程序。就像谷歌地图、雅虎地图一样，可以自动计算两地的距离，定位经纬度，与 Google 地图不同的是，该项目是建立在 WinForm 框架或 WPF 框架基础上的。可以对地图放大缩小，进行城市标记等。</p><h2 id="GMap-net-for-WPF-绘制要素"><a href="#GMap-net-for-WPF-绘制要素" class="headerlink" title="GMap.net for WPF 绘制要素"></a>GMap.net for WPF 绘制要素</h2><ul><li><p>不同于 Winform 版本，WPF 版本没有图层的概念，但用于显示要素的对象 GMapMarker 提供了 Zindex 属性，该属性值大的会遮盖属性值小的。所以大家可以利用 Zindex 对地理要素建立逻辑上的图层关联。</p></li><li><p>WinForm版本绘图可以直接在显示对象上设置图形的属性，如：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GMapPolygon polygon = new GMapPolygon(pointList, &quot;Polygon&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    IsHitTestVisible = true;</span><br><span class="line">    Fill = new SolidBrush(Color.FromArgb(50, Color.Red));</span><br><span class="line">    Stroke = new Pen(Color.Blue, 2);</span><br><span class="line">&#125;</span><br><span class="line">overlay.Polygons.Add(polygon);</span><br></pre></td></tr></table></figure><p>  对于wpf版本的点对象，可以直接指定显示用户控件，如：<br></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GMapMarker marker = new GMapMarker(pointLatLng);</span><br><span class="line">&#123;</span><br><span class="line">    MyUserControl myUserControl = new MyUserControl()</span><br><span class="line">    marker.Shape = myUserControl;</span><br><span class="line">    marker.ZIndex = (int)LayerIndex.Point;</span><br><span class="line">    marker.Offset = new Point(-myUserControl.ActualWidth / 2, -myUserControl.ActualHeight / 2);</span><br><span class="line">&#125;</span><br><span class="line">mapControl.Markers.Add(marker);</span><br></pre></td></tr></table></figure><p>  其中 MyUserControl 可以重载自 UserControl，并自定义显示内容。LayerIndex 为自定义的枚举类型。mapControl 重载自GMapControl。<br>  但是wpf版本的线的属性设置需要重载 GMapControl 的 CreateRoutePath 方法，面的属性设置需要重载 CreatePolygonPath 方法。为了不影响原函数的内容，我们可以参考 GMapControl 的源代码<a href="https://greatmaps.codeplex.com/SourceControl/latest#GMap.NET.WindowsPresentation/GMap.NET.WindowsPresentation/GMapControl.cs" title="查看源码文件" target="_blank" rel="noopener"><em>GMapControl.cs</em></a>文件。重载 CreateRoutePath 方法和 CreatePolygonPath 后的内容如下，只做了少量修改：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// creates path from list of points, for performance set addBlurEffect to false</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public override Path CreateRoutePath(List&lt;Point&gt; localPath, bool addBlurEffect)</span><br><span class="line">&#123;</span><br><span class="line">    // Create a StreamGeometry to use to specify myPath.</span><br><span class="line">    StreamGeometry geometry = new StreamGeometry();</span><br><span class="line"></span><br><span class="line">    using (StreamGeometryContext ctx = geometry.Open())</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.BeginFigure(localPath[0], false, false);</span><br><span class="line"></span><br><span class="line">        // Draw a line to the next specified point.</span><br><span class="line">        ctx.PolyLineTo(localPath, true, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Freeze the geometry (make it unmodifiable)</span><br><span class="line">    // for additional performance benefits.</span><br><span class="line">    geometry.Freeze();</span><br><span class="line"></span><br><span class="line">    // Create a path to draw a geometry with.</span><br><span class="line">    Path myPath = new Path();</span><br><span class="line">    &#123;</span><br><span class="line">        // Specify the shape of the Path using the StreamGeometry.</span><br><span class="line">        myPath.Data = geometry;</span><br><span class="line"></span><br><span class="line">        if (addBlurEffect)</span><br><span class="line">        &#123;</span><br><span class="line">            BlurEffect ef = new BlurEffect();</span><br><span class="line">            &#123;</span><br><span class="line">                ef.KernelType = KernelType.Gaussian;</span><br><span class="line">                ef.Radius = 0.0;</span><br><span class="line">                ef.RenderingBias = RenderingBias.Performance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myPath.Effect = ef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myPath.Stroke = lineBrush;</span><br><span class="line">        myPath.StrokeThickness = lineWidth;</span><br><span class="line">        myPath.StrokeLineJoin = PenLineJoin.Round;</span><br><span class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</span><br><span class="line">        myPath.StrokeEndLineCap = PenLineCap.Round;</span><br><span class="line"></span><br><span class="line">        myPath.Opacity = lineOpacity;</span><br><span class="line">        myPath.IsHitTestVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return myPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>注意:</code>代码中 lineBrush、lineWidth、lineOpacity 为重载 GMapControl 时新添的公共字段。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// creates path from list of points, for performance set addBlurEffect to false</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;pl&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public override Path CreatePolygonPath(List&lt;Point&gt; localPath, bool addBlurEffect)</span><br><span class="line">&#123;</span><br><span class="line">    // Create a StreamGeometry to use to specify myPath.</span><br><span class="line">    StreamGeometry geometry = new StreamGeometry();</span><br><span class="line"></span><br><span class="line">    using (StreamGeometryContext ctx = geometry.Open())</span><br><span class="line">    &#123;</span><br><span class="line">        ctx.BeginFigure(localPath[0], true, true);</span><br><span class="line"></span><br><span class="line">        // Draw a line to the next specified point.</span><br><span class="line">        ctx.PolyLineTo(localPath, true, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Freeze the geometry (make it unmodifiable)</span><br><span class="line">    // for additional performance benefits.</span><br><span class="line">    geometry.Freeze();</span><br><span class="line"></span><br><span class="line">    // Create a path to draw a geometry with.</span><br><span class="line">    Path myPath = new Path();</span><br><span class="line">    &#123;</span><br><span class="line">        // Specify the shape of the Path using the StreamGeometry.</span><br><span class="line">        myPath.Data = geometry;</span><br><span class="line"></span><br><span class="line">        if (addBlurEffect)</span><br><span class="line">        &#123;</span><br><span class="line">            BlurEffect ef = new BlurEffect();</span><br><span class="line">            &#123;</span><br><span class="line">                ef.KernelType = KernelType.Gaussian;</span><br><span class="line">                ef.Radius = 0.0;</span><br><span class="line">                ef.RenderingBias = RenderingBias.Performance;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myPath.Effect = ef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myPath.Stroke = polygonStrokeBrush;</span><br><span class="line">        myPath.StrokeThickness = polygonThickness;</span><br><span class="line">        myPath.StrokeLineJoin = PenLineJoin.Miter;</span><br><span class="line">        myPath.StrokeStartLineCap = PenLineCap.Triangle;</span><br><span class="line">        myPath.StrokeEndLineCap = PenLineCap.Square;</span><br><span class="line"></span><br><span class="line">        myPath.Fill = polygonFillBush;</span><br><span class="line"></span><br><span class="line">        myPath.Opacity = polygonOpacity;</span><br><span class="line">        myPath.IsHitTestVisible = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return myPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>注意:</code>代码中 polygonStrokeBrush、polygonThickness、polygonFillBush、polygonOpacity 为重载 GMapControl 时新添的公共字段。</p></li><li><p>wpf 版本只能绘制 Point、PolyLine、Polygon 三种图形，绘制圆则需要借助多边形的绘制。示例如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void DrawCircle(PointLatLng center, double R)</span><br><span class="line">&#123;</span><br><span class="line">    double cartesianCenterX = double.MaxValue;</span><br><span class="line">    double cartesianCenterY = double.MaxValue;</span><br><span class="line">    double cartesianCenterZ = double.MaxValue;</span><br><span class="line"></span><br><span class="line">    mapControl.MapProvider.Projection.FromGeodeticToCartesian(center.Lat, center.Lng, 0, out cartesianCenterX, out cartesianCenterY, out cartesianCenterZ);// 将圆心投影到笛卡尔坐标系</span><br><span class="line"></span><br><span class="line">    int pointCount = 200;// 用于拟合圆的多边形顶点个数</span><br><span class="line"></span><br><span class="line">    List&lt;PointLatLng&gt; polygonPointList = new List&lt;PointLatLng&gt;(pointCount);// 用于存放多边形顶点</span><br><span class="line"></span><br><span class="line">    double interval = 2 * Math.PI / pointCount;</span><br><span class="line">    for (double degree = 0; degree &lt; 2 * Math.PI; degree += interval)</span><br><span class="line">    &#123;</span><br><span class="line">        double tempX = cartesianCenterX + R * Math.Cos(degree);</span><br><span class="line">        double tempY = cartesianCenterY + R * Math.Sin(degree);</span><br><span class="line">        double tempLng = double.MaxValue;</span><br><span class="line">        double tempLat = double.MaxValue;</span><br><span class="line">        mapControl.MapProvider.Projection.FromCartesianTGeodetic(tempX, tempY, cartesianCenterZ, out tempLat, out tempLng);// 投影到WGS84坐标系</span><br><span class="line">        polygonPointList.Add(new PointLatLng(tempLat, tempLng));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GMapPolygon circle = new GMapPolygon(polygonPointList);</span><br><span class="line">    &#123;</span><br><span class="line">        circle.ZIndex = (int)LayerIndex.Polygon;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(circle);// 添加到地图</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Wpf-Draw-Circle.png" alt="软件截屏"><br><br>  因为投影问题，说好的圆变为了椭圆，如果想生成正圆，可以在程序中使用一些 WebAPI 服务替换 GMap 的投影服务，我们项目使用的是搭建在自己服务器上的的 GeoServer 服务。效果如下：<br>  <img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/FGIS-Damage-Circle.png" alt="软件截屏"><br></p></li></ul><h2 id="未指定长宽的要素与其他要素间相对定位的方式"><a href="#未指定长宽的要素与其他要素间相对定位的方式" class="headerlink" title="未指定长宽的要素与其他要素间相对定位的方式"></a>未指定长宽的要素与其他要素间相对定位的方式</h2><p>在使用 GMap 添加要素的时候，遇到需要对要素添加 Tooltip，但不能指定 Tooltip 的长宽，且该要素与 Tooltip 需要水平中心对其，试过很多办法都不能成功，因为 wpf 控件的 ActualWidth 和 ActualHeight 属性必须加载过一次才能有正确的属性值，也就是说如果根据长宽计算 GMapMarker 的偏移量，Tolltip 在第一次显示的时候无法正确定位，经过探索，最终利用 wpf 控件的 SizeChanged 响应函数实现了该效果。效果如下：<br><br><img src="https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/GMap-Tooltip.png" alt="软件截屏"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void AddIconWithTooltip(PointLatLng pll, Uri iconUri, string tooltip)</span><br><span class="line">&#123;</span><br><span class="line">    Guid id = Guid.NewGuid();</span><br><span class="line"></span><br><span class="line">    // 添加tooltip显示窗口</span><br><span class="line">    GMapMarker tooltipViewer = new GMapMarker(pll);</span><br><span class="line">    &#123;</span><br><span class="line">        tooltipViewer.ZIndex = (int)LayerIndex.Point;</span><br><span class="line">        tooltipViewer.Tag = id;</span><br><span class="line">        TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</span><br><span class="line">        tooltipViewer.Shape = content;</span><br><span class="line">        tooltipViewer.Shape.Visibility = Visibility.Hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(tooltipViewer);</span><br><span class="line"></span><br><span class="line">    UIElement shape = new MyIcon(new BitmapImage(iconUri), tooltipViewer);// 构造函数：MyIcon(ImageSource image, GMapMarker iconTooltipViewer, double width = 22, double height = 22, bool showTipAlways = false)</span><br><span class="line"></span><br><span class="line">    GMapMarker iconMarker = new GMapMarker(pll);</span><br><span class="line">    &#123;</span><br><span class="line">        iconMarker.ZIndex = (int)layerIndex;</span><br><span class="line">        iconMarker.Offset = new Point(-11, -11);</span><br><span class="line">        iconMarker.Tag = id;</span><br><span class="line">        iconMarker.Shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line">    mapControl.Markers.Add(iconMarker);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>代码中id的作用是用于 GMapMarker 间的逻辑关联，方便同时从 MapControl 中移除。<br><br>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TooltipForMap content = new TooltipForMap(tooltip, tooltipViewer);</span><br></pre></td></tr></table></figure><p>其中 TooltipForMap 类的 SizeChanged 函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void TooltipForMap_SizeChanged(object sender, SizeChangedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    _TooltipViewer.Offset = new Point(-ActualWidth / 2, -ActualHeight - 22);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code>_TooltipViewer 和传入构造函数的 tooltipViewer 为同一实例。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CS-Tao/github-content/master/contents/blog/image/others/gmap.png&quot; width=&quot;20%&quot; height=&quot;20%&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文记录了利用 GMap.net for WPF 绘制点线面的方式和在项目中遇到的对未指定长宽的要素与其他要素间相对定位的方式&lt;br&gt;
    
    </summary>
    
      <category term="软件开发" scheme="https://cs-tao.github.io/blog/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Wpf" scheme="https://cs-tao.github.io/blog/tags/Wpf/"/>
    
      <category term="GMap.net" scheme="https://cs-tao.github.io/blog/tags/GMap-net/"/>
    
  </entry>
  
</feed>
